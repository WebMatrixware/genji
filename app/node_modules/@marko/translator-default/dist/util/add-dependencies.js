"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.default = void 0;var _path = _interopRequireDefault(require("path"));
var _magicString = _interopRequireDefault(require("magic-string"));
var _compiler = require("@marko/compiler");
var _babelUtils = require("@marko/babel-utils");var _default =
(entryFile, isHydrate) => {
  const {
    modules,
    resolveVirtualDependency,
    hydrateIncludeImports } =
  entryFile.markoOpts;
  const program = entryFile.path;
  const shouldIncludeImport = toTestFn(hydrateIncludeImports);

  if (!isHydrate) {
    addBrowserDeps(entryFile);
    return;
  }

  const registerId = _compiler.types.identifier("register");
  const watchFiles = new Set();
  let hasComponents = false;
  let splitComponentIndex = 0;
  program.set("body", []);
  program.skip();

  addHydrateDeps(entryFile);
  entryFile.metadata.marko.watchFiles = Array.from(watchFiles);

  if (hasComponents) {
    const initId = _compiler.types.identifier("init");
    const markoComponentsImport = importPath(
    entryFile,
    "marko/src/runtime/components");

    if (splitComponentIndex) {
      markoComponentsImport.specifiers.push(
      _compiler.types.importSpecifier(registerId, registerId));

    }
    markoComponentsImport.specifiers.push(_compiler.types.importSpecifier(initId, initId));
    program.unshiftContainer("body", markoComponentsImport);
    program.pushContainer(
    "body",
    _compiler.types.expressionStatement(
    _compiler.types.callExpression(
    initId,
    entryFile.markoOpts.runtimeId ?
    [_compiler.types.stringLiteral(entryFile.markoOpts.runtimeId)] :
    [])));



  }

  function addHydrateDeps(file) {
    const meta = file.metadata.marko;

    if (meta.component) {
      hasComponents = true;

      if (
      _path.default.basename(meta.component) ===
      _path.default.basename(file.opts.sourceFileName))
      {
        // Stateful component.
        program.pushContainer("body", importPath(file, meta.component));
        return;
      }
    }

    watchFiles.add(file.opts.sourceFileName);

    for (const watchFile of meta.watchFiles) {
      watchFiles.add(watchFile);
    }

    addBrowserDeps(file);

    for (const imported of meta.imports) {
      if (shouldIncludeImport(imported)) {
        program.pushContainer("body", importPath(file, imported));
      }
    }

    for (const tag of meta.tags) {
      if (tag.endsWith(".marko")) {
        addHydrateDeps((0, _babelUtils.loadFileForImport)(file, tag));
      }
    }

    if (meta.component) {
      // Split component
      const splitComponentId = _compiler.types.identifier(
      `component_${splitComponentIndex++}`);

      const splitComponentImport = importPath(file, meta.component);
      splitComponentImport.specifiers.push(
      _compiler.types.importDefaultSpecifier(splitComponentId));

      program.pushContainer("body", splitComponentImport);
      program.pushContainer(
      "body",
      _compiler.types.expressionStatement(
      _compiler.types.callExpression(registerId, [
      _compiler.types.stringLiteral(meta.id),
      splitComponentId])));



    }
  }

  function addBrowserDeps(file) {
    const { sourceFileName, sourceMaps } = file.opts;
    let s;

    for (let dep of file.metadata.marko.deps) {
      if (typeof dep !== "string") {
        const { virtualPath } = dep;
        let { code } = dep;
        let map;

        if (sourceMaps && dep.startPos !== undefined) {
          s = s || new _magicString.default(file.code, { source: sourceFileName });
          map = s.snip(dep.startPos, dep.endPos).generateMap({
            source: sourceFileName,
            includeContent: true });


          if (sourceMaps === "inline" || sourceMaps === "both") {
            code += dep.style ?
            `\n/*# sourceMappingURL=${map.toUrl()}*/` :
            `\n//# sourceMappingURL=${map.toUrl()}`;

            if (sourceMaps === "inline") {
              map = undefined;
            }
          }
        }

        dep = resolveVirtualDependency(sourceFileName, {
          map,
          code,
          virtualPath });

      } else if (dep.startsWith("package:")) {
        continue;
      }

      program.pushContainer("body", importPath(file, dep));
    }
  }

  function importPath(file, req) {
    const resolved =
    file === entryFile ?
    (0, _babelUtils.resolveRelativePath)(file, req) :
    (0, _babelUtils.resolveRelativePath)(
    entryFile,
    _path.default.join(file.opts.sourceFileName, "..", req));


    if (modules === "cjs") {
      return _compiler.types.expressionStatement(
      _compiler.types.callExpression(_compiler.types.identifier("require"), [_compiler.types.stringLiteral(resolved)]));

    }

    return _compiler.types.importDeclaration([], _compiler.types.stringLiteral(resolved));
  }
};exports.default = _default;

function toTestFn(val) {
  if (typeof val === "function") {
    return val;
  }

  return val.test.bind(val);
}
//# sourceMappingURL=add-dependencies.js.map