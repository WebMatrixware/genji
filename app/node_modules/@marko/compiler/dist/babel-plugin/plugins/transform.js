"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");exports.__esModule = true;exports.visitor = void 0;var _babelUtils = require("@marko/babel-utils");
var t = _interopRequireWildcard(require("../../babel-types"));
var _pluginHooks = require("../util/plugin-hooks");

/**
 * Applies custom transformers on tags.
 */
const visitor = {
  MarkoTag: {
    enter(path) {
      const transformers = getTransformersForTag(path);
      const { node } = path;

      for (const transformer of transformers) {
        (0, _pluginHooks.enter)(transformer, path, t);
        if (path.node !== node) break; // Stop if node is replaced.
      }
    },
    exit(path) {
      const transformers = getTransformersForTag(path);
      const { node } = path;

      for (const transformer of transformers) {
        (0, _pluginHooks.exit)(transformer, path, t);
        if (path.node !== node) break; // Stop if node is replaced.
      }
    } } };exports.visitor = visitor;



function getTransformersForTag(path) {
  const {
    hub: { file } } =
  path;
  const { watchFiles } = file.metadata.marko;
  const tagName = path.get("name.value").node || "*";
  const TRANSFORMER_CACHE = file.TRANSFORMER_CACHE =
  file.TRANSFORMER_CACHE || Object.create(null);

  let transformers = TRANSFORMER_CACHE[tagName];

  if (!transformers) {
    transformers = TRANSFORMER_CACHE[tagName] = [];
    const addTransformers = tagDef => {
      if (tagDef && tagDef.transformers) {
        for (const transformer of tagDef.transformers) {
          if (transformer.path) {
            watchFiles.push(transformer.path);
          }
          transformers.push(transformer.hook);
        }
      }
    };

    addTransformers((0, _babelUtils.getTagDef)(path));

    if (tagName !== "*") {
      addTransformers((0, _babelUtils.getTagDefForTagName)(file, "*"));
    }
  }

  return transformers;
}
//# sourceMappingURL=transform.js.map