{"version":3,"sources":["../../../src/babel-plugin/util/parse-attributes.js"],"names":["file","attributes","startPos","code","attrEndPos","map","attr","attrStartPos","default","pos","indexOf","name","startsWith","attrExpression","slice","argument","value","length","t","markoSpreadAttribute","match","exec","modifier","endPos","valueStart","rawValue","booleanLiteral","markoAttribute","Boolean"],"mappings":"4OAAA;AACA;AACA,2E;;AAEe,CAACA,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,KAAgC;AAC7C,QAAMC,IAAI,GAAGH,IAAI,CAACG,IAAlB;AACA,MAAIC,UAAU,GAAGF,QAAjB;;AAEA,SAAOD,UAAU,CAACI,GAAX,CAAeC,IAAI,IAAI;AAC5B,UAAMC,YAAY,GAAGD,IAAI,CAACE,OAAL;AACjBF,IAAAA,IAAI,CAACG,GADY;AAEjBN,IAAAA,IAAI,CAACO,OAAL,CAAaJ,IAAI,CAACK,IAAlB,EAAwBP,UAAxB,CAFJ;;AAIA,QAAIE,IAAI,CAACK,IAAL,CAAUC,UAAV,CAAqB,KAArB,CAAJ,EAAiC;AAC/B,UAAIC,cAAc,GAAGP,IAAI,CAACK,IAAL,CAAUG,KAAV,CAAgB,CAAhB,CAArB;;AAEA,UAAIR,IAAI,CAACS,QAAT,EAAmB;AACjBF,QAAAA,cAAc,IAAK,IAAGP,IAAI,CAACS,QAAL,CAAcC,KAAM,GAA1C;AACD;;AAEDZ,MAAAA,UAAU,GAAGG,YAAY,GAAGM,cAAc,CAACI,MAA3C;;AAEA,YAAMD,KAAK,GAAG,iCAAgBhB,IAAhB,EAAsBa,cAAtB,EAAsCN,YAAY,GAAG,CAArD,CAAd;;AAEA;AACA,aAAO;AACLP,MAAAA,IADK;AAELkB,MAAAA,CAAC,CAACC,oBAAF,CAAuBH,KAAvB,CAFK;AAGLT,MAAAA,YAHK;AAILH,MAAAA,UAJK,CAAP;;AAMD;;AAED,UAAMgB,KAAK,GAAG,SAASC,IAAT,CAAcf,IAAI,CAACK,IAAnB,CAAd;AACA,UAAMW,QAAQ,GAAGF,KAAK,IAAIA,KAAK,CAAC,CAAD,CAA/B;AACA,QAAIT,IAAI,GAAGL,IAAI,CAACK,IAAhB;AACA,QAAIK,KAAJ;;AAEA,QAAIM,QAAJ,EAAc;AACZX,MAAAA,IAAI,GAAGA,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcH,IAAI,CAACM,MAAL,GAAcK,QAAQ,CAACL,MAAvB,GAAgC,CAA9C,CAAP;AACD;;AAED,QAAIX,IAAI,CAACU,KAAT,EAAgB;AACdZ,MAAAA,UAAU,GAAGE,IAAI,CAACiB,MAAlB;AACA,YAAMC,UAAU,GAAGlB,IAAI,CAACG,GAAL,GAAW,CAA9B,CAFc,CAEmB;AACjC,YAAMgB,QAAQ,GAAGtB,IAAI,CAACW,KAAL,CAAWU,UAAX,EAAuBpB,UAAvB,CAAjB,CAHc,CAGuC;AACrDY,MAAAA,KAAK,GAAG,iCAAgBhB,IAAhB,EAAsByB,QAAtB,EAAgCD,UAAhC,CAAR;AACD,KALD,MAKO;AACLpB,MAAAA,UAAU,GAAGE,IAAI,CAACS,QAAL,GAAgBT,IAAI,CAACS,QAAL,CAAcQ,MAAd,GAAuB,CAAvC,GAA2CjB,IAAI,CAACiB,MAA7D;AACAP,MAAAA,KAAK,GAAGE,CAAC,CAACQ,cAAF,CAAiB,IAAjB,CAAR;AACD;;AAED,WAAO;AACL1B,IAAAA,IADK;AAELkB,IAAAA,CAAC,CAACS,cAAF;AACEhB,IAAAA,IADF;AAEEK,IAAAA,KAFF;AAGEM,IAAAA,QAHF;AAIE,iCAAetB,IAAf,EAAqBM,IAAI,CAACS,QAA1B,CAJF;AAKEa,IAAAA,OAAO,CAACtB,IAAI,CAACE,OAAN,CALT,CAFK;;AASLD,IAAAA,YATK;AAULH,IAAAA,UAVK,CAAP;;AAYD,GAxDM,CAAP;AAyDD,C","sourcesContent":["import * as t from \"../../babel-types\";\nimport { withLoc, parseExpression } from \"@marko/babel-utils\";\nimport parseArguments from \"./parse-arguments\";\n\nexport default (file, attributes, startPos) => {\n  const code = file.code;\n  let attrEndPos = startPos;\n\n  return attributes.map(attr => {\n    const attrStartPos = attr.default\n      ? attr.pos\n      : code.indexOf(attr.name, attrEndPos);\n\n    if (attr.name.startsWith(\"...\")) {\n      let attrExpression = attr.name.slice(3);\n\n      if (attr.argument) {\n        attrExpression += `(${attr.argument.value})`;\n      }\n\n      attrEndPos = attrStartPos + attrExpression.length;\n\n      const value = parseExpression(file, attrExpression, attrStartPos + 3);\n\n      // TODO: Inline merge object literals.\n      return withLoc(\n        file,\n        t.markoSpreadAttribute(value),\n        attrStartPos,\n        attrEndPos\n      );\n    }\n\n    const match = /:(.*)$/.exec(attr.name);\n    const modifier = match && match[1];\n    let name = attr.name;\n    let value;\n\n    if (modifier) {\n      name = name.slice(0, name.length - modifier.length - 1);\n    }\n\n    if (attr.value) {\n      attrEndPos = attr.endPos;\n      const valueStart = attr.pos + 1; // Add one to account for \"=\".\n      const rawValue = code.slice(valueStart, attrEndPos); // We use the raw value to ignore things like non standard placeholders.\n      value = parseExpression(file, rawValue, valueStart);\n    } else {\n      attrEndPos = attr.argument ? attr.argument.endPos + 1 : attr.endPos;\n      value = t.booleanLiteral(true);\n    }\n\n    return withLoc(\n      file,\n      t.markoAttribute(\n        name,\n        value,\n        modifier,\n        parseArguments(file, attr.argument),\n        Boolean(attr.default)\n      ),\n      attrStartPos,\n      attrEndPos\n    );\n  });\n};\n"],"file":"parse-attributes.js"}