"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");exports.__esModule = true;exports.default = void 0;var _babelUtils = require("@marko/babel-utils");
var t = _interopRequireWildcard(require("../../babel-types"));var _default =

(file, shorthand, attributes) => {
  if (!shorthand) {
    return attributes;
  }

  const idAttr = attributes.find(({ name }) => name === "id");
  if (idAttr) {
    throw file.buildCodeFrameError(
    idAttr,
    "Cannot have shorthand id and id attribute.");

  }

  const idParts = shorthand.rawParts.map((part) =>
  part.expression ?
  (0, _babelUtils.parseExpression)(file, part.expression, part.pos) :
  (0, _babelUtils.withLoc)(file, t.stringLiteral(part.text), part.pos, part.endPos));


  attributes.push(
  t.markoAttribute(
  "id",
  idParts.length === 1 ?
  idParts[0] :
  idParts.reduce((a, b) => t.binaryExpression("+", a, b))));



  return attributes;
};exports.default = _default;
//# sourceMappingURL=parse-id-shorthand.js.map