"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var babelTypes = _interopRequireWildcard(require("@babel/types"));
var _builder = _interopRequireDefault(require("@babel/types/lib/builders/builder"));
var _utils = _interopRequireDefault(require("@babel/types/lib/definitions/utils"));
var generatedValidators = _interopRequireWildcard(require("@babel/types/lib/validators/generated"));
var referencedValidators = _interopRequireWildcard(require("@babel/types/lib/validators/isReferenced"));
var _definitions = _interopRequireWildcard(require("./definitions")); /* eslint-disable no-import-assign */

const {
  TYPES,
  VISITOR_KEYS,
  FLIPPED_ALIAS_KEYS,
  DEPRECATED_KEYS,
  is,
  getBindingIdentifiers } =
babelTypes;

getBindingIdentifiers.keys["MarkoTag"] = ["var"];
getBindingIdentifiers.keys["MarkoTagBody"] = ["params"];

_definitions.MARKO_TYPES.forEach(typeName => {
  (0, _utils.default)(typeName, _definitions.default[typeName]);
});

for (const type of [
...Object.keys(VISITOR_KEYS),
...Object.keys(FLIPPED_ALIAS_KEYS),
...Object.keys(DEPRECATED_KEYS)])
{
  if (!TYPES.includes(type)) TYPES.push(type);
}

_definitions.MARKO_TYPES.forEach(typeName => {
  const lowerName = typeName[0].toLowerCase() + typeName.slice(1);
  const checkKey = `is${typeName}`;
  const assertKey = `assert${typeName}`;
  babelTypes[checkKey] = (node, opts) => is(typeName, node, opts);
  babelTypes[assertKey] = (node, opts) => assert(typeName, node, opts);
  babelTypes[typeName] = babelTypes[lowerName] = (...args) =>
  (0, _builder.default)(typeName, ...args);
});

_definitions.MARKO_ALIAS_TYPES.forEach(aliasName => {
  const checkKey = `is${aliasName}`;
  const originalCheck = generatedValidators[checkKey];
  generatedValidators[checkKey] = (node, opts) =>
  is(aliasName, node, opts) || originalCheck(node, opts);
});

const originalIsReferenced = referencedValidators.default;
referencedValidators.default = (node, parent, grandparent) => {
  if (parent.type === "MarkoTag" || parent.type === "MarkoTagBody") {
    return false;
  }
  return originalIsReferenced(node, parent, grandparent);
};

function assert(typeName, node, opts) {
  if (!is(typeName, node, opts)) {
    throw new Error(
    `Expected type "${typeName}" with option ${JSON.stringify(
    opts)
    }, but instead got "${node.type}".`);

  }
}
//# sourceMappingURL=patch.js.map